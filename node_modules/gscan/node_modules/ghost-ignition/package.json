{
  "_args": [
    [
      {
        "raw": "ghost-ignition@https://registry.npmjs.org/ghost-ignition/-/ghost-ignition-2.8.10.tgz",
        "scope": null,
        "escapedName": "ghost-ignition",
        "name": "ghost-ignition",
        "rawSpec": "https://registry.npmjs.org/ghost-ignition/-/ghost-ignition-2.8.10.tgz",
        "spec": "https://registry.npmjs.org/ghost-ignition/-/ghost-ignition-2.8.10.tgz",
        "type": "remote"
      },
      "C:\\Users\\ibcn\\Documents\\Ghost"
    ]
  ],
  "_from": "ghost-ignition@>=2.8.7 <3.0.0",
  "_id": "ghost-ignition@2.8.10",
  "_inCache": true,
  "_location": "/gscan/ghost-ignition",
  "_phantomChildren": {
    "ini": "1.3.4",
    "json-stringify-safe": "5.0.1",
    "moment": "2.18.1",
    "nan": "2.4.0",
    "request": "2.75.0"
  },
  "_requested": {
    "raw": "ghost-ignition@https://registry.npmjs.org/ghost-ignition/-/ghost-ignition-2.8.10.tgz",
    "scope": null,
    "escapedName": "ghost-ignition",
    "name": "ghost-ignition",
    "rawSpec": "https://registry.npmjs.org/ghost-ignition/-/ghost-ignition-2.8.10.tgz",
    "spec": "https://registry.npmjs.org/ghost-ignition/-/ghost-ignition-2.8.10.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/gscan"
  ],
  "_resolved": "https://registry.npmjs.org/ghost-ignition/-/ghost-ignition-2.8.10.tgz",
  "_shasum": "7bde7d3d7d87790736f9991fb4f497154e56db14",
  "_shrinkwrap": null,
  "_spec": "ghost-ignition@https://registry.npmjs.org/ghost-ignition/-/ghost-ignition-2.8.10.tgz",
  "_where": "C:\\Users\\ibcn\\Documents\\Ghost",
  "author": {
    "name": "Ghost Foundation"
  },
  "bugs": {
    "url": "https://github.com/TryGhost/Ignition/issues"
  },
  "dependencies": {
    "bunyan": "1.8.5",
    "bunyan-loggly": "1.1.0",
    "caller": "1.0.1",
    "debug": "^2.2.0",
    "find-root": "1.0.0",
    "json-stringify-safe": "5.0.1",
    "lodash": "^4.16.4",
    "moment": "^2.15.2",
    "nconf": "0.8.4",
    "prettyjson": "1.1.3",
    "uuid": "^3.0.0"
  },
  "description": "Basic configuration and tooling shared across applications",
  "devDependencies": {
    "chai": "3.5.0",
    "grunt": "1.0.1",
    "grunt-release": "0.14.0",
    "mocha": "3.0.1",
    "should": "11.1.1",
    "sinon": "1.17.6"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "homepage": "https://github.com/TryGhost/Ignition#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "ghost-ignition",
  "optionalDependencies": {},
  "readme": "# Ignition\nBasic configuration and tooling shared across applications\n\n\n## Logging\n```\nvar logging = require('ghost-ignition').logging({\n    domain: 'example.com,\n    env: 'production',\n    mode: 'long',\n    level: 'info',\n    transports: ['file'],\n    rotation: {enabled: true, period: '1d', count: 10},\n    path: '/var/log'\n});\n\nmode         : long|short (default is `short`) - defines the output volume (helpful when logging requests)\nlevel        : info|error|debug (default is `info`)\ntransports   : stdout|file (default is `['stdout']`\npath         : is used when file transport is enabled (default is `process.cwd()`)\n\nlogging.info({req: req, res: res});\nlogging.info('Info');\nlogging.error(new Error());\nlogging.warn('this', 'is', 'a', 'warning');\nlogging.debug('this is a debug mode');\n```\n\n### env parameter\nYou can use `LEVEL=error` or `MODE=long`.\n\n\n### Logging into file\nWe log JSON format into file. This is very easy to forward and easy to interprete.\nBy default we create two log files:\n- errors log entries: contains only errors\n- all log entries: contains everything\n\nYou can easily make the log files readable by calling:\n`cat your.log | bunyan`\n\n### Loggly Stream\nYou can send your logs to loggly by configuring the logger like this:\n\n```\nvar logging = require('ghost-ignition').logging({\n    domain: 'example.com,\n    env: 'production',\n    mode: 'long',\n    level: 'info',\n    transports: ['file', 'loggly'],\n    rotation: {enabled: true, period: '1d', count: 10},\n    path: '/var/log',\n    loggly: {\n      token: 'your-token',\n      subdomain: 'your-subdomain',\n      match: 'regex as string to match specific properties only certain log entries'\n    }\n});\n\nExample for match:\nmatch: 'level:critical'\nmatch: 'statusCode:500|statusCode:403'\n```\n\n### Utils\n\n```\nvar errors = require('ghost-ignition');\n\n// you can pass any error and ignition will tell you if this is a custom ignition error\nerrors.utils.isIgnitionError(err);\n\n// serialize an error to a specific format\nerrors.utils.serialize(err, {format: 'jsonapi|oauth'});\n\n// deserialize specific format to error instance\nerrors.utils.deserialize(err);\n```\n\n# Copyright & License\n\nCopyright (c) 2016-2017 Ghost Foundation - Released under the [MIT license](LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TryGhost/Ignition.git"
  },
  "scripts": {
    "test": "mocha -- $(find test -name '*.test.js')"
  },
  "version": "2.8.10"
}
